diff --git a/node_modules/@multiformats/multiaddr/dist/src/convert.js b/node_modules/@multiformats/multiaddr/dist/src/convert.js
index 7141bdb..17bbaae 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/convert.js
+++ b/node_modules/@multiformats/multiaddr/dist/src/convert.js
@@ -91,17 +91,26 @@ const anybaseDecoder = (function () {
     return acc;
 })();
 function ip2bytes(ipString) {
+    if (ipString === '127.0.0.1') {
+        return Uint8Array.from([127, 0, 0, 1])
+    }
+
+    ipString = ipString.toString().trim()
     if (!ip.isIP(ipString)) {
         throw new Error(`invalid ip address "${ipString}"`);
     }
     return ip.toBytes(ipString);
 }
 function bytes2ip(ipBuff) {
+    if (ipBuff[0] === 127 && ipBuff[1] === 0 && ipBuff[2] === 0 && ipBuff[3] === 1) {
+        return '127.0.0.1'
+    }
+
     const ipString = ip.toString(ipBuff, 0, ipBuff.length);
     if (ipString == null) {
         throw new Error('ipBuff is required');
     }
-    if (!ip.isIP(ipString)) {
+    if (!ip.isIP(ipString.toString().trim())) {
         throw new Error(`invalid ip address "${ipString}"`);
     }
     return ipString;
diff --git a/node_modules/@multiformats/multiaddr/dist/src/ip.js b/node_modules/@multiformats/multiaddr/dist/src/ip.js
index 19eee54..bd61f92 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/ip.js
+++ b/node_modules/@multiformats/multiaddr/dist/src/ip.js
@@ -3,17 +3,23 @@ import { toString as uint8ArrayToString } from 'uint8arrays/to-string';
 export { isIP } from 'is-ip';
 export const isV4 = isIPv4;
 export const isV6 = isIPv6;
+import { logger } from '@libp2p/logger'
+const log = logger('ipfs:multiaddr')
 // Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7
 // but with buf/offset args removed because we don't use them
 export const toBytes = function (ip) {
+    if (ip === '127.0.0.1') {
+        return Uint8Array.from([127, 0, 0, 1])
+    }
+
     let offset = 0;
-    let result;
-    ip = ip.trim();
+    ip = ip.toString().trim();
     if (isV4(ip)) {
-        result = new Uint8Array(offset + 4);
+        const result = new Uint8Array(offset + 4);
         ip.split(/\./g).forEach((byte) => {
             result[offset++] = parseInt(byte, 10) & 0xff;
         });
+        return result;
     }
     else if (isV6(ip)) {
         const sections = ip.split(':', 8);
@@ -46,41 +52,43 @@ export const toBytes = function (ip) {
             }
             sections.splice.apply(sections, argv);
         }
-        result = new Uint8Array(offset + 16);
+        const result = new Uint8Array(offset + 16);
         for (i = 0; i < sections.length; i++) {
             const word = parseInt(sections[i], 16);
             result[offset++] = (word >> 8) & 0xff;
             result[offset++] = word & 0xff;
         }
+
+        return result;
     }
-    if (result == null) {
-        throw new Error(`invalid ip address "${ip}"`);
-    }
-    return result;
+    throw new Error(`invalid ip address "${ip}" isV4(${isV4(ip)}) isV6(${isV6(ip)}) ${typeof ip}`);
 };
 // Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63
 export const toString = function (buf, offset = 0, length) {
     offset = ~~offset;
     length = length ?? (buf.length - offset);
-    const result = [];
-    let string = '';
     const view = new DataView(buf.buffer);
     if (length === 4) {
+        const result = [];
+
         // IPv4
         for (let i = 0; i < length; i++) {
             result.push(buf[offset + i]);
         }
-        string = result.join('.');
+        return result.join('.');
     }
-    else if (length === 16) {
+
+    if (length === 16) {
+        const result = [];
+
         // IPv6
         for (let i = 0; i < length; i += 2) {
             result.push(view.getUint16(offset + i).toString(16));
         }
-        string = result.join(':');
-        string = string.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3');
-        string = string.replace(/:{3,4}/, '::');
+        return result.join(':')
+            .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')
+            .replace(/:{3,4}/, '::');
     }
-    return string;
+    return '';
 };
 //# sourceMappingURL=ip.js.map
\ No newline at end of file
