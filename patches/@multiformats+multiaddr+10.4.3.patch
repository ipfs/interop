diff --git a/node_modules/@multiformats/multiaddr/dist/src/convert.js b/node_modules/@multiformats/multiaddr/dist/src/convert.js
index 7141bdb..1aa8dc3 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/convert.js
+++ b/node_modules/@multiformats/multiaddr/dist/src/convert.js
@@ -91,6 +91,7 @@ const anybaseDecoder = (function () {
     return acc;
 })();
 function ip2bytes(ipString) {
+    ipString = ipString.toString().trim()
     if (!ip.isIP(ipString)) {
         throw new Error(`invalid ip address "${ipString}"`);
     }
@@ -101,7 +102,7 @@ function bytes2ip(ipBuff) {
     if (ipString == null) {
         throw new Error('ipBuff is required');
     }
-    if (!ip.isIP(ipString)) {
+    if (!ip.isIP(ipString.toString().trim())) {
         throw new Error(`invalid ip address "${ipString}"`);
     }
     return ipString;
diff --git a/node_modules/@multiformats/multiaddr/dist/src/ip.js b/node_modules/@multiformats/multiaddr/dist/src/ip.js
index 19eee54..15f7f9f 100644
--- a/node_modules/@multiformats/multiaddr/dist/src/ip.js
+++ b/node_modules/@multiformats/multiaddr/dist/src/ip.js
@@ -3,17 +3,19 @@ import { toString as uint8ArrayToString } from 'uint8arrays/to-string';
 export { isIP } from 'is-ip';
 export const isV4 = isIPv4;
 export const isV6 = isIPv6;
+import { logger } from '@libp2p/logger'
+const log = logger('ipfs:multiaddr')
 // Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7
 // but with buf/offset args removed because we don't use them
 export const toBytes = function (ip) {
     let offset = 0;
-    let result;
-    ip = ip.trim();
+    ip = ip.toString().trim();
     if (isV4(ip)) {
-        result = new Uint8Array(offset + 4);
+        const result = new Uint8Array(offset + 4);
         ip.split(/\./g).forEach((byte) => {
             result[offset++] = parseInt(byte, 10) & 0xff;
         });
+        return result;
     }
     else if (isV6(ip)) {
         const sections = ip.split(':', 8);
@@ -46,17 +48,16 @@ export const toBytes = function (ip) {
             }
             sections.splice.apply(sections, argv);
         }
-        result = new Uint8Array(offset + 16);
+        const result = new Uint8Array(offset + 16);
         for (i = 0; i < sections.length; i++) {
             const word = parseInt(sections[i], 16);
             result[offset++] = (word >> 8) & 0xff;
             result[offset++] = word & 0xff;
         }
+
+        return result;
     }
-    if (result == null) {
-        throw new Error(`invalid ip address "${ip}"`);
-    }
-    return result;
+    throw new Error(`invalid ip address "${ip}" isV4(${isV4(ip)}) isV6(${isV6(ip)}) ${typeof ip}`);
 };
 // Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63
 export const toString = function (buf, offset = 0, length) {
